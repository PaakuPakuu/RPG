// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace DbService.Models
{
    public partial class Rpg_Jh_LocalContext : DbContext
    {
        public Rpg_Jh_LocalContext()
        {
        }

        public Rpg_Jh_LocalContext(DbContextOptions<Rpg_Jh_LocalContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Boutique> Boutique { get; set; }
        public virtual DbSet<Donjon> Donjon { get; set; }
        public virtual DbSet<GroupeMonstre> GroupeMonstre { get; set; }
        public virtual DbSet<Inventaire> Inventaire { get; set; }
        public virtual DbSet<Item> Item { get; set; }
        public virtual DbSet<Joueur> Joueur { get; set; }
        public virtual DbSet<Monstre> Monstre { get; set; }
        public virtual DbSet<RaceMonstre> RaceMonstre { get; set; }
        public virtual DbSet<RacePersonnage> RacePersonnage { get; set; }
        public virtual DbSet<TypeItem> TypeItem { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            modelBuilder.Entity<Boutique>(entity =>
            {
                entity.HasKey(e => e.IdBoutique)
                    .HasName("PRIMARY");

                entity.ToTable("boutique");

                entity.Property(e => e.IdBoutique).HasColumnName("id_boutique");

                entity.Property(e => e.Nom)
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnName("nom");
            });

            modelBuilder.Entity<Donjon>(entity =>
            {
                entity.HasKey(e => e.IdDonjon)
                    .HasName("PRIMARY");

                entity.ToTable("donjon");

                entity.Property(e => e.IdDonjon).HasColumnName("id_donjon");

                entity.Property(e => e.Recompense).HasColumnName("recompense");
            });

            modelBuilder.Entity<GroupeMonstre>(entity =>
            {
                entity.HasKey(e => e.IdGroupeMonstre)
                    .HasName("PRIMARY");

                entity.ToTable("groupe_monstre");

                entity.HasIndex(e => e.IdDonjon, "groupe_monstre_donjon_idx");

                entity.Property(e => e.IdGroupeMonstre).HasColumnName("id_groupe_monstre");

                entity.Property(e => e.IdDonjon).HasColumnName("id_donjon");

                entity.HasOne(d => d.IdDonjonNavigation)
                    .WithMany(p => p.GroupeMonstre)
                    .HasForeignKey(d => d.IdDonjon)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("groupe_monstre_donjon");
            });

            modelBuilder.Entity<Inventaire>(entity =>
            {
                entity.HasKey(e => e.IdInventaire)
                    .HasName("PRIMARY");

                entity.ToTable("inventaire");

                entity.HasIndex(e => e.IdBoutique, "boutique_inventaire_idx");

                entity.Property(e => e.IdInventaire).HasColumnName("id_inventaire");

                entity.Property(e => e.IdBoutique).HasColumnName("id_boutique");

                entity.Property(e => e.Slots).HasColumnName("slots");

                entity.HasOne(d => d.IdBoutiqueNavigation)
                    .WithMany(p => p.Inventaire)
                    .HasForeignKey(d => d.IdBoutique)
                    .HasConstraintName("boutique_inventaire");
            });

            modelBuilder.Entity<Item>(entity =>
            {
                entity.HasKey(e => e.IdItem)
                    .HasName("PRIMARY");

                entity.ToTable("item");

                entity.HasIndex(e => e.IdInventaire, "item_inventaire_idx");

                entity.HasIndex(e => e.IdTypeItem, "item_type_item_idx");

                entity.Property(e => e.IdItem).HasColumnName("id_item");

                entity.Property(e => e.IdInventaire).HasColumnName("id_inventaire");

                entity.Property(e => e.IdTypeItem).HasColumnName("id_type_item");

                entity.Property(e => e.Quantite).HasColumnName("quantite");

                entity.HasOne(d => d.IdInventaireNavigation)
                    .WithMany(p => p.Item)
                    .HasForeignKey(d => d.IdInventaire)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("item_inventaire");

                entity.HasOne(d => d.IdTypeItemNavigation)
                    .WithMany(p => p.Item)
                    .HasForeignKey(d => d.IdTypeItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("item_type_item");
            });

            modelBuilder.Entity<Joueur>(entity =>
            {
                entity.HasKey(e => e.IdJoueur)
                    .HasName("PRIMARY");

                entity.ToTable("joueur");

                entity.HasIndex(e => e.IdInventaire, "joueur_inventaire_idx");

                entity.HasIndex(e => e.IdRace, "joueur_race_idx");

                entity.Property(e => e.IdJoueur).HasColumnName("id_joueur");

                entity.Property(e => e.Adresse).HasColumnName("adresse");

                entity.Property(e => e.Argent).HasColumnName("argent");

                entity.Property(e => e.Charisme).HasColumnName("charisme");

                entity.Property(e => e.Courage).HasColumnName("courage");

                entity.Property(e => e.Debilibuck).HasColumnName("debilibuck");

                entity.Property(e => e.Destin).HasColumnName("destin");

                entity.Property(e => e.Experience).HasColumnName("experience");

                entity.Property(e => e.Force).HasColumnName("force");

                entity.Property(e => e.IdInventaire).HasColumnName("id_inventaire");

                entity.Property(e => e.IdRace).HasColumnName("id_race");

                entity.Property(e => e.Intelligence).HasColumnName("intelligence");

                entity.Property(e => e.ManqueDeBol).HasColumnName("manque_de_bol");

                entity.Property(e => e.Niveau).HasColumnName("niveau");

                entity.Property(e => e.Nom)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasColumnName("nom");

                entity.Property(e => e.Or).HasColumnName("or");

                entity.HasOne(d => d.IdInventaireNavigation)
                    .WithMany(p => p.Joueur)
                    .HasForeignKey(d => d.IdInventaire)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("joueur_inventaire");

                entity.HasOne(d => d.IdRaceNavigation)
                    .WithMany(p => p.Joueur)
                    .HasForeignKey(d => d.IdRace)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("joueur_race");
            });

            modelBuilder.Entity<Monstre>(entity =>
            {
                entity.HasKey(e => e.IdMonstre)
                    .HasName("PRIMARY");

                entity.ToTable("monstre");

                entity.HasIndex(e => e.IdGroupe, "monstre_groupe_idx");

                entity.HasIndex(e => e.IdRace, "monstre_race_idx");

                entity.Property(e => e.IdMonstre).HasColumnName("id_monstre");

                entity.Property(e => e.IdGroupe).HasColumnName("id_groupe");

                entity.Property(e => e.IdRace).HasColumnName("id_race");

                entity.HasOne(d => d.IdGroupeNavigation)
                    .WithMany(p => p.Monstre)
                    .HasForeignKey(d => d.IdGroupe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("monstre_groupe");

                entity.HasOne(d => d.IdRaceNavigation)
                    .WithMany(p => p.Monstre)
                    .HasForeignKey(d => d.IdRace)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("monstre_race");
            });

            modelBuilder.Entity<RaceMonstre>(entity =>
            {
                entity.HasKey(e => e.IdRaceMonstre)
                    .HasName("PRIMARY");

                entity.ToTable("race_monstre");

                entity.Property(e => e.IdRaceMonstre).HasColumnName("id_race_monstre");

                entity.Property(e => e.Nom)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasColumnName("nom");
            });

            modelBuilder.Entity<RacePersonnage>(entity =>
            {
                entity.HasKey(e => e.IdRacePersonnage)
                    .HasName("PRIMARY");

                entity.ToTable("race_personnage");

                entity.Property(e => e.IdRacePersonnage).HasColumnName("id_race_personnage");

                entity.Property(e => e.Nom)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasColumnName("nom");
            });

            modelBuilder.Entity<TypeItem>(entity =>
            {
                entity.HasKey(e => e.IdTypeItem)
                    .HasName("PRIMARY");

                entity.ToTable("type_item");

                entity.Property(e => e.IdTypeItem).HasColumnName("id_type_item");

                entity.Property(e => e.Nom).HasColumnName("nom");

                entity.Property(e => e.Prix).HasColumnName("prix");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}